'''

TITLE: ALGORITHMIC TRADING PLATFORM 
USAGES: BACK-TESTING OUR STRATEGIES ; LIVE TRADING ENVIRONMENT
BROKER: INTERACTIVE BROKERS (TO IMPLEMENT)

TODO:

CURRENTLY THERE IS NO ERROR HANDLING

THIS PLATFORM IS WORKING WELL WITH US EQUITIES FOR EXAMPLE, SOME FURTHER WORK SHOULD BE DONE TO SPLIT THE ALGO TRADING LIBRARY INTO EQUITY, FX AND FIXED INCOME. THIS WILL BE CLEANER

IDEA: WANT TO FOCUS AND DEVELOP OUT A DIGITAL CURRENCY SPECIFIC TRADING PLATFORM. 

BITCOIN: 
	TICKER: BTC

'''


from AlgoTrade import AlgoTrade as TRADE #OUR LIBRARY
from yahoo_finance import Share
import json


if __name__ == "__main__":
	#USER INPUT
	ASSET = raw_input("Enter the ticker of choice (GOOG = Google): ") 
	START_DATE = raw_input("Enter start date (yyyy-mm-dd): ")
	END_DATE = raw_input("Enter end date (yyyy-mm-dd): ")
	HOLDING_PERIOD = raw_input("Enter strategy holding period (days): ")
	
	#CONNECT TO API FOR DATA RETREVIAL
	CHOSEN_ASSET = Share(ASSET)
	#WE FOCUS ON BACK TESTING ATM - THIS WILL BE DEVELOPED OUT TO LIVE TRADING
	DATA = CHOSEN_ASSET.get_historical(START_DATE,END_DATE)
	
	#CREATE TRADE OBJECT FROM OUR LIBRARY AlgoTrade
	TRADE_OBJECT = TRADE(DATA,HOLDING_PERIOD)
	#GET OPEN AND CLOSE PRICES
	GET_ASSET_SPECIFIC_DATA = TRADE_OBJECT.open_close()
	#FIND DIFFERENCE
	INTRA_DAY_ANALYSIS = TRADE_OBJECT.calc_intraday_difference(GET_ASSET_SPECIFIC_DATA)
	#INITIAL SIMPLE STRATEGY: IF TODAY IS NEG WE BUY, IF TODAY IS POS WE SELL
	INITIATE_SIMPLE_STRATEGY = TRADE_OBJECT.what_side(INTRA_DAY_ANALYSIS)
	
	#CREATE DATA STRUCTURE FOR PROFIT ANALYSIS
	PROFIT_DATA_STRUCTURE = [INITIATE_SIMPLE_STRATEGY, INTRA_DAY_ANALYSIS]
	#ANALYSE PROFIT
	ANALYSE_STRATEGY = TRADE_OBJECT.analyse_profit(PROFIT_DATA_STRUCTURE)
	

